name: Build and push image to DockerHub

on:
  push:
    branches:
      - 'main'
    tags:
      - 'v*'
  workflow_run:
    workflows: ["Update Calendso"]
    branches: [main]
    types:
      - completed
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Free Disk Space (Ubuntu)
        uses: jlumbroso/free-disk-space@main
        with:
          tool-cache: true

      - name: checkout
        uses: actions/checkout@v4

      - name: Git submodule update
        run: |
          git submodule update --init

      - name: Log in to the Docker Hub registry
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_TOKEN }}
          logout: true

      - name: Log in to the Github Container registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            docker.io/${{ secrets.DOCKER_HUB_USERNAME }}/cal.com
          flavor: |
            latest=${{ !github.event.release.prerelease }}

      - name: Copy env
        run: |
          grep -o '^[^#]*' .env.example > .env
          cat .env >> $GITHUB_ENV
          echo "DATABASE_HOST=localhost:5432" >> $GITHUB_ENV
          eval $(sed -e '/^#/d' -e 's/^/export /' -e 's/$/;/' .env)

      - name: Start database
        run: |
          docker compose up -d database

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          install: true
          driver-opts: |
            network=container:database
          buildkitd-flags: |
            --allow-insecure-entitlement security.insecure \
            --allow-insecure-entitlement network.host
          platforms: linux/amd64,linux/arm64

      - name: Build & push image
        id: docker_build
        uses: docker/build-push-action@v5
        with:
          context: ./
          file: ./Dockerfile
          push: true
          platforms: linux/amd64,linux/arm64
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          build-args: |
            NEXT_PUBLIC_WEBAPP_URL=${{ env.NEXT_PUBLIC_WEBAPP_URL }}
            NEXT_PUBLIC_API_V2_URL=${{ env.NEXT_PUBLIC_API_V2_URL }}
            NEXT_PUBLIC_LICENSE_CONSENT=${{ env.NEXT_PUBLIC_LICENSE_CONSENT }}
            NEXT_PUBLIC_TELEMETRY_KEY=${{ env.NEXT_PUBLIC_TELEMETRY_KEY }}
            DATABASE_URL=postgresql://${{ env.POSTGRES_USER }}:${{ env.POSTGRES_PASSWORD }}@${{ env.DATABASE_HOST }}/${{ env.POSTGRES_DB }}
            DATABASE_DIRECT_URL=postgresql://${{ env.POSTGRES_USER }}:${{ env.POSTGRES_PASSWORD }}@${{ env.DATABASE_HOST }}/${{ env.POSTGRES_DB }}

      - name: Test runtime
        run: |
          tags="${{ steps.meta.outputs.tags }}"
          IFS=',' read -ra ADDR <<< "$tags"
          tag=${ADDR[0]}

          docker run --rm --network stack \
            -p 3000:3000 \
            -e DATABASE_URL=postgresql://${{ env.POSTGRES_USER }}:${{ env.POSTGRES_PASSWORD }}@database/${{ env.POSTGRES_DB }} \
            -e DATABASE_DIRECT_URL=postgresql://${{ env.POSTGRES_USER }}:${{ env.POSTGRES_PASSWORD }}@database/${{ env.POSTGRES_DB }} \
            -e NEXTAUTH_SECRET=${{ env.NEXTAUTH_SECRET }} \
            -e CALENDSO_ENCRYPTION_KEY=${{ env.CALENDSO_ENCRYPTION_KEY }} \
            $tag &

          server_pid=$!
          echo "Waiting for the server to start..."
          sleep 120

          for i in {1..60}; do
            echo "Checking server health ($i/60)â€¦"
            if curl -o /dev/null -s -w "%{http_code}" ${{ env.NEXT_PUBLIC_WEBAPP_URL }}/auth/login | grep -qE '^(200|307)$'; then
              echo "Server is healthy"
              kill $server_pid
              exit 0
            fi
            sleep 1
          done

          echo "Server health check failed"
          kill $server_pid
          exit 1
        env:
          NEXTAUTH_SECRET: 'EI4qqDpcfdvf4A+0aQEEx8JjHxHSy4uWiZw/F32K+pA='
          CALENDSO_ENCRYPTION_KEY: '0zfLtY99wjeLnsM7qsa8xsT+Q0oSgnOL'

      - name: Image digest
        run: echo ${{ steps.docker_build.outputs.digest }}

      - name: Cleanup
        run: |
          docker compose down
